import{_ as t,c as e,o as a,O as r}from"./chunks/framework.d7e37bdc.js";const g=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"rust/type.md","filePath":"rust/type.md","lastUpdated":1683677121000}'),n={name:"rust/type.md"},d=r('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">长度</th><th style="text-align:center;">有符号</th><th style="text-align:center;">无符号</th></tr></thead><tbody><tr><td style="text-align:center;">8-bit</td><td style="text-align:center;">i8</td><td style="text-align:center;">u8</td></tr><tr><td style="text-align:center;">16-bit</td><td style="text-align:center;">i16</td><td style="text-align:center;">u16</td></tr><tr><td style="text-align:center;">32-bit</td><td style="text-align:center;">i32</td><td style="text-align:center;">u32</td></tr><tr><td style="text-align:center;">64-bit</td><td style="text-align:center;">i64</td><td style="text-align:center;">u64</td></tr><tr><td style="text-align:center;">128-bit</td><td style="text-align:center;">i128</td><td style="text-align:center;">u128</td></tr><tr><td style="text-align:center;">arch</td><td style="text-align:center;">isize</td><td style="text-align:center;">usize</td></tr></tbody></table><p>这里需要注意的是 <code>arch</code> 类型依赖运行的计算机架构。在64位架构上是64位，在32位架构上是32位长度。</p>',4),l=[d];function i(s,c,o,y,_,h){return a(),e("div",null,l)}const p=t(n,[["render",i]]);export{g as __pageData,p as default};
