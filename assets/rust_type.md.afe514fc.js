import{_ as t,c as e,o as a,O as r}from"./chunks/framework.d7e37bdc.js";const u=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"rust/type.md","filePath":"rust/type.md","lastUpdated":1683797636000}'),l={name:"rust/type.md"},d=r('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="标量类型" tabindex="-1">标量类型 <a class="header-anchor" href="#标量类型" aria-label="Permalink to &quot;标量类型&quot;">​</a></h2><h3 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">长度</th><th style="text-align:center;">有符号</th><th style="text-align:center;">无符号</th></tr></thead><tbody><tr><td style="text-align:center;">8-bit</td><td style="text-align:center;">i8</td><td style="text-align:center;">u8</td></tr><tr><td style="text-align:center;">16-bit</td><td style="text-align:center;">i16</td><td style="text-align:center;">u16</td></tr><tr><td style="text-align:center;">32-bit</td><td style="text-align:center;">i32（默认）</td><td style="text-align:center;">u32</td></tr><tr><td style="text-align:center;">64-bit</td><td style="text-align:center;">i64</td><td style="text-align:center;">u64</td></tr><tr><td style="text-align:center;">128-bit</td><td style="text-align:center;">i128</td><td style="text-align:center;">u128</td></tr><tr><td style="text-align:center;">arch</td><td style="text-align:center;">isize</td><td style="text-align:center;">usize</td></tr></tbody></table><p>这里需要注意的是 <code>arch</code> 类型依赖运行的计算机架构。在64位架构上是64位，在32位架构上是32位长度。</p><p>整数的除法会向下舍入到最接近的整数。比如 <code>-5 / 3</code> 的结果为 <code>-1</code>。</p><h3 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-label="Permalink to &quot;浮点型&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">长度</th><th style="text-align:center;">类型</th></tr></thead><tbody><tr><td style="text-align:center;">32-bit</td><td style="text-align:center;">f32</td></tr><tr><td style="text-align:center;">64-bit</td><td style="text-align:center;">f64（默认）</td></tr></tbody></table><h3 id="bool-型" tabindex="-1">bool 型 <a class="header-anchor" href="#bool-型" aria-label="Permalink to &quot;bool 型&quot;">​</a></h3><p>只有 <code>false</code> 和 <code>true</code> 两个类型。</p><h3 id="字符" tabindex="-1">字符 <a class="header-anchor" href="#字符" aria-label="Permalink to &quot;字符&quot;">​</a></h3><p>类型为 <code>char</code>。这个类型跟 C 语言的类型有区别。C 中只能存储一个字节的内容，而这里的长度是 4 个字节，并代表 unicode 标量值。</p><h2 id="复合类型" tabindex="-1">复合类型 <a class="header-anchor" href="#复合类型" aria-label="Permalink to &quot;复合类型&quot;">​</a></h2><h3 id="元祖" tabindex="-1">元祖 <a class="header-anchor" href="#元祖" aria-label="Permalink to &quot;元祖&quot;">​</a></h3><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3>',15),n=[d];function i(o,c,s,h,x,b){return a(),e("div",null,n)}const g=t(l,[["render",i]]);export{u as __pageData,g as default};
